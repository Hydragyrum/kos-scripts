FUNCTION OBT_LNG_TO_DEGREES {
	PARAMETER lng.
	RETURN MOD(lng+360, 360).
}
FUNCTION OBT_ORBITABLE {
	PARAMETER name.
	LIST TARGETS in vessels.
	FOR vs IN vessels { IF vs:NAME = name { RETURN VESSEL(name). } }
	RETURN BODY(name).
}
FUNCTION OBT_TARGET_ANGLE {
	PARAMETER target.
	RETURN MOD(OBT_LNG_TO_DEGREES(OBT_ORBITABLE(target):LONGITUDE)-OBT_LNG_TO_DEGREES(SHIP:LONGITUDE)+360,360).
}
FUNCTION OBT_TARGET_ANGLE2 {
	PARAMETER target.
	LOCAL tgtOrb IS OBT_ORBITABLE(target):ORBIT.
	LOCAL shpOrb IS SHIP:ORBIT.
	LOCAL tgtTA IS tgtOrb:TRUEANOMALY.
	LOCAL tgtARGP IS tgtOrb:ARGUMENTOFPERIAPSIS.
	LOCAL tgtLAN IS tgtOrb:LAN.
	LOCAL tgtEcc IS tgtOrb:ECCENTRICITY.
	LOCAL shpTA IS shpOrb:TRUEANOMALY.
	LOCAL shpARGP IS shpOrb:ARGUMENTOFPERIAPSIS.
	LOCAL shpLAN IS shpOrb:LAN.
	LOCAL shpEcc IS shpOrb:ECCENTRICITY.
	LOCAL tgtTheta IS OBT_LNG_TO_DEGREES(tgtTA+tgtARGP+tgtLAN).
	LOCAL shpTheta IS OBT_LNG_TO_DEGREES(shpTA+shpARGP+shpLAN).
	LOCAL tgtE IS OBT_TRUE_TO_ECC_ANOMALY(tgtTheta,tgtEcc).
	LOCAL tgtM IS OBT_ECC_TO_MEAN_ANOMALY(tgtE,tgtEcc).
	LOCAL shpE IS OBT_TRUE_TO_ECC_ANOMALY(shpTheta,shpEcc).
	LOCAL shpM IS OBT_ECC_TO_MEAN_ANOMALY(shpE,shpEcc).
	RETURN OBT_LNG_TO_DEGREES(tgtM-shpM).
}
FUNCTION OBT_RELATIVE_LAN {
	PARAMETER target.
	LOCAL tgt IS OBT_ORBITABLE(target).
	LOCAL r IS tgt:POSITION-SHIP:POSITION.
	LOCAL v IS tgt:VELOCITY:ORBIT-SHIP:VELOCITY:ORBIT.
	LOCAL h IS VCRS(r,v).
	LOCAL k IS VCRS(SHIP:POSITION-SHIP:BODY:POSITION, SHIP:VELOCITY:ORBIT-SHIP:BODY:VELOCITY:ORBIT).
	LOCAL n IS VCRS(h,k):NORMALIZED.
	IF n:Y>=0 {
		RETURN ARCCOS(n:X).
	} ELSE {
		RETURN 360-ARCCOS(n:X).
	}
}
FUNCTION OBT_TIME_TO_CLOSEST_NODE {
	PARAMETER target.
	LOCAL tgt IS OBT_ORBITABLE(target).
	LOCAL O IS OBT_RELATIVE_LAN(target).
	LOG "4:"+O TO mnv_4.txt.
	IF (O>180 AND O<360) {
		SET O TO O-180.
	}
	RETURN OBT_MEAN_TIME_FROM_ANGLE(OBT_LNG_TO_DEGREES(OBT_MEAN_ANOMALY(FALSE)-O)).
}
FUNCTION OBT_MEAN_TIME_FROM_ANGLE {
	PARAMETER meanAnomaly.
	RETURN SHIP:ORBIT:PERIOD*(meanAnomaly/360).
}
FUNCTION OBT_MEAN_ANGLE_FROM_TIME {
	PARAMETER deltaTime.
	RETURN 360 * deltaTime/SHIP:ORBIT:PERIOD.
}
FUNCTION OBT_MEAN_ANOMALY {
	PARAMETER useTarget.
	LOCAL tgt IS SHIP.
	IF useTarget=TRUE SET tgt TO TARGET.
	LOCAL ta IS tgt:ORBIT:TRUEANOMALY.
	LOCAL ecc IS tgt:ORBIT:ECCENTRICITY.
	LOCAL ea IS OBT_TRUE_TO_ECC_ANOMALY(ta,ecc).
	LOCAL ma IS OBT_ECC_TO_MEAN_ANOMALY(ea,ecc).
	RETURN ma.
}
FUNCTION OBT_TRUE_TO_ECC_ANOMALY {
	PARAMETER ta. PARAMETER ecc.
	RETURN MOD(360+ARCTAN2(SQRT(1-ecc*ecc)*SIN(ta),ecc+COS(ta)),360).
}
FUNCTION OBT_ECC_TO_TRUE_ANOMALY {
	PARAMETER ea. PARAMETER ecc.
	RETURN MOD(360+(2*ARCTAN2(SQRT(1+ecc)*SIN(ea/2),SQRT(1-ecc)*COS(ea/2))),360).
}
FUNCTION OBT_ECC_TO_MEAN_ANOMALY {
	PARAMETER ea. PARAMETER ecc.
	RETURN MOD(360+CONSTANT:RADTODEG*(CONSTANT:DEGTORAD*ea-(ecc*SIN(ea))),360).
}
FUNCTION OBT_MEAN_TO_ECC_ANOMALY {
	PARAMETER ma. PARAMETER ecc.
	LOCAL tol IS 1e-6.
	LOCAL delta IS 360.
	LOCAL x IS ma.
	LOCAL xn IS 0.
	LOCAL i IS 0.
	UNTIL delta < tol {
		SET xn TO CONSTANT:RADTODEG * (CONSTANT:DEGTORAD*x)-(((CONSTANT:DEGTORAD*x)-ecc*SIN(x)-(CONSTANT:DEGTORAD*ma))/(1-ecc*COS(x))).
		SET delta TO ABS(xn-x).
		SET i TO i+1.
		SET x TO xn.
	}
	RETURN xn.
}
